plugins {
    id 'com.android.test'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id 'jacoco'
}

task "createAndroidTestCoverage"(type: JacocoReport) { task ->

    def targetProject = project(':app')
    mustRunAfter "connectedDebugAndroidTest"
    group = "Reporting"
    description = "Generate Jacoco coverage reports on the debug build."
    println("Build directory: $buildDir")

    def fileFilter = [
            // data binding
            'android/databinding/**/*.class',
            '**/android/databinding/*Binding.class',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
            '**/BR.*',
            // android
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            // dagger
            '**/*_MembersInjector.class',
            '**/Dagger*Component.class',
            '**/Dagger*Component$Builder.class',
            '**/Dagger*Subcomponent*.class',
            '**/*Subcomponent$Builder.class',
            '**/*Module_*Factory.class',
            '**/di/module/*',
            '**/*_Factory*.*',
            '**/*Module*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
            // kotlin
            '**/*MapperImpl*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/BuildConfig.*',
            '**/*Component*.*',
            '**/*BR*.*',
            '**/Manifest*.*',
            '**/*$Lambda$*.*',
            '**/*Companion*.*',
            '**/*Module*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
            '**/*MembersInjector*.*',
            '**/*_MembersInjector.class',
            '**/*_Factory*.*',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            // sealed and data classes
            '**/*$Result.*',
            '**/*$Result$*.*',
            // adapters generated by moshi
            '**/*JsonAdapter.*',
    ]

// If intune plugin is applied, the instrumented files are changed with their MAM counterparts.
// If we use the same files, we don't get proper coverage. So, I am using the location where the transformed files are present.
    logger.info("Target project has Hilt plugin, using asm_instrumented paths for class directories")
    getClassDirectories().setFrom(files(["${targetProject.buildDir}/intermediates/asm_instrumented_project_classes/debug"]))

    logger.info("Project's Build Directory: $project.buildDir")
    getExecutionData().setFrom(fileTree(dir: project.buildDir, includes:
            ['**/*.exec', '**/*.ec']))
    def coverageSourceDirs = ["${targetProject.projectDir}/src/main/java"]
//    def additionalCoverageSourceDirs = ["${targetProject.projectDir}/src/main/${buildTypeName}", "${targetProject.projectDir}/src/main/${productFlavorName}"]

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: fileFilter)
        }))
    }

    sourceDirectories.setFrom(files(coverageSourceDirs))
//    additionalSourceDirs.setFrom(files(additionalCoverageSourceDirs))

    def coverageReportDestination = file("${buildDir}/reports/jacocoCoverageReport")
    reports {
        csv {
            enabled true
            destination file("${coverageReportDestination}/jacocoCoverageReport.csv")
        }
        xml {
            enabled true
            destination file("${coverageReportDestination}/jacocoCoverageReport.xml")
        }
        html {
            enabled true
            destination file("${coverageReportDestination}/html")
        }
    }
}

android {
    namespace 'com.example.testonlymodule'
    compileSdk 33
    targetProjectPath ':app'

    defaultConfig {
        minSdk 24
        targetSdk 33

        testInstrumentationRunner "com.example.testonlymodule.ARRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

//    implementation 'androidx.core:core-ktx:1.7.0'
//    implementation 'androidx.appcompat:appcompat:1.5.1'
//    implementation 'com.google.android.material:material:1.7.0'
//    testImplementation 'junit:junit:4.13.2'
    implementation 'androidx.test.ext:junit:1.1.4'
    implementation 'androidx.test.espresso:espresso-core:3.5.0'
    implementation project(':app')

//    implementation "androidx.work:work-runtime-ktx:$work_version"


// AndroidX test specific dependencies
    implementation "androidx.test.ext:junit:$junit_ext_version"
    implementation "androidx.test.ext:junit-ktx:$junit_ext_version"
    implementation "androidx.test:core:$testCoreVersion"
    implementation "androidx.test:runner:$test_runner_version"
    implementation "androidx.test:rules:$test_rules_version"
    implementation "androidx.test:monitor:$test_monitor_version"
    implementation "androidx.room:room-testing:$room_version"
    implementation "androidx.test.ext:junit-ktx:$junit_ext_version"

    implementation "org.mockito:mockito-core:$mockito_version"
    implementation "org.mockito.kotlin:mockito-kotlin:$mockito_kotlin_version"

// Espresso specific dependencies
    implementation "androidx.test.espresso:espresso-core:$espressoVersion"
    implementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    implementation "androidx.test.espresso:espresso-web:$espressoVersion"
    implementation ("androidx.test.espresso:espresso-contrib:$espressoVersion") {
        exclude module: "protobuf-lite"
    }
    implementation ("androidx.test.espresso:espresso-accessibility:$espressoVersion") {
        exclude module: "protobuf-lite"
    }

    implementation "androidx.room:room-testing:$room_version"

    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"
    implementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

}